;;; Compiled snippets and support files for `ruby-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'ruby-mode
                     '((nil "=>" "=>" nil nil nil nil "C-," nil)
                       ("acc" "accepts_nested_attributes_for :$1" "accepts_nested_attributes_for" nil nil nil nil nil nil)
                       ("thin" "group :development do\n  gem \"thin\"\n  gem \"quiet_assets\"\nend" "add gem thin" nil nil nil nil nil nil)
                       ("as" "assign(:$1, $2)" "assign()" nil nil nil nil nil nil)
                       ("ass" "assigns(:$1)" "assigns()" nil nil nil nil nil nil)
                       ("attach" "file = Rack::Test::UploadedFile.new(fixtures(\"${1:sample.tif}\"), \"image/${2:tiff}\")\n" "attach" nil nil nil nil nil nil)
                       ("attachment" "include ActionDispatch::TestProcess\n${1:attachment} { fixture_file_upload(Rails.root.join(\"spec/fixtures/${2:rails.tif}\"), '${3:image/tif}') }" "attachment(FactoryGirl)" nil nil nil nil nil nil)
                       ("attachment" "attach_file(\"${1:image[attachment]}\", ${2:path})\n" "attachment(cucumber)" nil nil nil nil nil nil)
                       ("attr" "attr_accessible :$1\n" "attr_accessible" nil nil nil nil nil nil)
                       ("attr" "attr_accessor :$1" "attr_accessor" nil nil nil nil nil nil)
                       ("attr" "attr_writer :$1\n" "attr_writer" nil nil nil nil nil nil)
                       ("auth" "let(:owner) { create(:user) }\n\nbefore :each do\n  sign_in owner\nend\n\ndescribe \"로그인 하지 않은 사용자를 로그인 페이지로 리다이렉트 된다\" do\n  before { sign_out owner }\n  after  { expect(response).to redirect_to new_user_session_path }\n  it { get :index }\nend" "auth :rspec" nil nil nil nil nil nil)
                       ("before" "before :each do\n       $0\nend" "before :each" nil nil nil nil nil nil)
                       ("gem" "gem 'capistrano-rails'\ngem 'capistrano-rvm', '~> 0.1.0'\ngem 'capistrano3-puma', github: \"seuros/capistrano-puma\"\n\ngroup :production do\n  gem 'puma'\nend\n" "capistrano" nil nil nil nil nil nil)
                       ("gem" "gem 'capistrano-rails'\ngem 'rvm1-capistrano3', require: false\ngem 'capistrano3-puma', github: \"seuros/capistrano-puma\"\ngem 'capistrano-bower'\n\ngroup :production do\n  gem 'puma'\nend" "capistrano with puma" nil nil nil nil nil nil)
                       ("capture" "require 'stringio'\n\ndef capture(*streams)\n  streams.map! { |stream| stream.to_s }\n  begin\n    result = StringIO.new\n    streams.each { |stream| eval \"$#{stream} = result\" }\n    yield\n  ensure\n    streams.each { |stream| eval(\"$#{stream} = #{stream.upcase}\") }\n  end\n  result.string\nend\n" "capture" nil nil nil nil nil nil)
                       ("capture" "def capture(cmd)\n  streams = [:stdout, :stderr]\n  streams.map! { |stream| stream.to_s }\n  begin\n    result = StringIO.new\n    streams.each { |stream| eval \"$#{stream} = result\" }\n    Kernel.system cmd\n  ensure\n    streams.each { |stream| eval(\"$#{stream} = #{stream.upcase}\") }\n  end\n  result.string\nend" "capture_with_cmd" nil nil nil nil nil nil)
                       ("chef" "remote_file ${1:local} do\n  source   ${2:url}\n  checksum ${3:checksum}\n  mode     ${4:0644}\nend\n" "chef remote-file" nil nil nil nil nil nil)
                       ("chef" "user ${1:username} do\n  comment \"#{$1} User\"\n  gid ${2:group}\n  home \"/home/#{$1}\"\n  supports(manage_home: true)\n  shell '/bin/bash'\nend\n" "chef user" nil nil nil nil nil nil)
                       ("chrome" "Capybara.register_driver :chrome do |app|\n  Capybara::Selenium::Driver.new(app, :browser => :chrome)\nend\n\nCapybara.javascript_driver = :chrome\n" "chrome" nil nil nil nil nil nil)
                       ("cla" "class ${1:`(replace-regexp-in-string \"_\" \"\" (capitalize (file-name-base)))`}\n      $0\nend" "class" nil nil nil nil nil nil)
                       ("clc" "class ${1:`(replace-regexp-in-string \"_\" \"\" (capitalize (file-name-base)))`} < ${2:ApplicationController}\n\n      $0\n\nend" "class < ApplicationController" nil nil nil nil nil nil)
                       ("clmm" "class ${1:`(replace-regexp-in-string \"_\" \"\" (capitalize (file-name-base)))`}\n      include Mongoid:Dcoument\n      $0\nend" "class Model for mongoid" nil nil nil nil nil nil)
                       ("rdoc" "##\n# This class represents an arbitrary shape by a series of points.\n" "class (RDoc)" nil nil nil nil nil nil)
                       ("clam" "`(ruby-module-defs)`\nclass ${1:`(replace-regexp-in-string \"_\" \"\" (capitalize (file-name-base)))`}\n      $0\nend\n`(ruby-module-defs-ends)`" "class with module" nil nil nil nil nil nil)
                       ("click" "first(:css, \"input[type=submit]\").click\n" "click(capybara)" nil nil nil nil nil nil)
                       ("click" "click_link \"$1\"\n" "click_link(id)" nil nil nil nil nil nil)
                       ("co" "context '$1' do\n  $0\nend" "context" nil nil nil nil nil nil)
                       ("rake" "# cucumber\nrequire 'cucumber'\nrequire 'cucumber/rake/task'\nCucumber::Rake::Task.new :cucumber ${1:do |t|\n$0\nend}" "cucumber task" nil nil nil nil nil nil)
                       ("def" "def ${1:name}\n    $0\nend" "def" nil nil nil nil nil nil)
                       ("rake" "task default: [:spec, :cucumber]" "default task" nil nil nil nil nil nil)
                       ("de" "describe '$1' do\n         $0\nend" "describe" nil nil nil nil nil nil)
                       ("devise" "config.to_prepare do\n  Devise::SessionsController.layout \"your_layout_name\"\n  Devise::RegistrationsController.layout \"your_layout_name\"\n  Devise::ConfirmationsController.layout \"your_layout_name\"\n  Devise::UnlocksController.layout \"your_layout_name\"\n  Devise::PasswordsController.layout \"your_layout_name\"\nend" "devise" nil nil nil nil nil nil)
                       ("resource" "def resource_name\n  :user\nend\n\ndef resource\n  @resource ||= User.new\nend\n\ndef devise_mapping\n  @devise_mapping ||= Devise.mappings[:user]\nend" "devise resource" nil nil nil nil nil nil)
                       ("em" "embedded_in :$1\n" "embedded_in" nil nil nil nil nil nil)
                       ("em" "embeds_many :$1" "embeds_many" nil nil nil nil nil nil)
                       ("em" "embeds_one :$1\n" "embeds_one" nil nil nil nil nil nil)
                       ("gem" "gem 'ember-rails'\ngem 'ember-source', '1.0.0.rc5'\ngem 'handlebars-source', '1.0.0.rc4'" "ember" nil nil nil nil nil nil)
                       ("en" "# -*- coding: utf-8 -*-" "encoding" nil nil nil nil nil nil)
                       ("env(rushcut)" "include FactoryGirl::Syntax::Methods\n\ndef actor_matcher\n  /\"?(내|[^\"]+)\"?/\nend\n" "env" nil nil nil nil nil nil)
                       ("env" "Dir[File.expand_path(\"../../../spec/support/**/*.rb\", __FILE__)].each { |f| require f }\ninclude Path\nrequire root_path.join(\"lib/$1\")\n" "env(gem)" nil nil nil nil nil nil)
                       ("env" "# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.\n# It is recommended to regenerate this file in the future when you upgrade to a\n# newer version of cucumber-rails. Consider adding your own code to a new file\n# instead of editing this one. Cucumber will automatically load all features/**/*.rb\n# files.\n\nrequire 'cucumber/rails'\n\n# Capybara defaults to CSS3 selectors rather than XPath.\n# If you'd prefer to use XPath, just uncomment this line and adjust any\n# selectors in your step definitions to use the XPath syntax.\n# Capybara.default_selector = :xpath\n\n# By default, any exception happening in your Rails application will bubble up\n# to Cucumber so that your scenario will fail. This is a different from how\n# your application behaves in the production environment, where an error page will\n# be rendered instead.\n#\n# Sometimes we want to override this default behaviour and allow Rails to rescue\n# exceptions and display an error page (just like when the app is running in production).\n# Typical scenarios where you want to do this is when you test your error pages.\n# There are two ways to allow Rails to rescue exceptions:\n#\n# 1) Tag your scenario (or feature) with @allow-rescue\n#\n# 2) Set the value below to true. Beware that doing this globally is not\n# recommended as it will mask a lot of errors for you!\n#\nActionController::Base.allow_rescue = false\n\n# Remove/comment out the lines below if your app doesn't have a database.\n# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.\nbegin\n  DatabaseCleaner.orm = 'mongoid'\n  DatabaseCleaner.strategy = :truncation\nrescue NameError\n  raise \"You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it.\"\nend\n\n# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.\n# See the DatabaseCleaner documentation for details. Example:\n#\n#   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do\n#     # { :except => [:widgets] } may not do what you expect here\n#     # as Cucumber::Rails::Database.javascript_strategy overrides\n#     # this setting.\n#     DatabaseCleaner.strategy = :truncation\n#   end\n#\n#   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do\n#     DatabaseCleaner.strategy = :truncation\n#   end\n#\n\n# Possible values are :truncation and :truncation\n# The :truncation strategy is faster, but might give you threading problems.\n# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature\nCucumber::Rails::Database.javascript_strategy = :truncation\n\n# include FactoryGirl::Syntax::Methods" "env(mongoid)" nil nil nil nil nil nil)
                       ("env" "# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.\n# It is recommended to regenerate this file in the future when you upgrade to a\n# newer version of cucumber-rails. Consider adding your own code to a new file\n# instead of editing this one. Cucumber will automatically load all features/**/*.rb\n# files.\n\nENV[\"RAILS_ENV\"] ||= \"test\"\nrequire File.expand_path(File.dirname(__FILE__) + '/../../config/environment')\n\nrequire 'cucumber/formatter/unicode' # Remove this line if you don't want Cucumber Unicode support\nrequire 'cucumber/rails/rspec'\nrequire 'cucumber/rails/world'\n# require 'cucumber/rails/active_record'\nrequire 'cucumber/web/tableish'\n\nrequire 'capybara/rails'\nrequire 'capybara/cucumber'\nrequire 'capybara/session'\nrequire 'cucumber/rails/capybara_javascript_emulation' # Lets you click links with onclick javascript handlers without using @culerity or @javascript\n\nrequire 'mongoid'\n\n# Capybara defaults to XPath selectors rather than Webrat's default of CSS3. In\n# order to ease the transition to Capybara we set the default here. If you'd\n# prefer to use XPath just remove this line and adjust any selectors in your\n# steps to use the XPath syntax.\nCapybara.default_selector = :css\n\n# If you set this to false, any error raised from within your app will bubble\n# up to your step definition and out to cucumber unless you catch it somewhere\n# on the way. You can make Rails rescue errors and render error pages on a\n# per-scenario basis by tagging a scenario or feature with the @allow-rescue tag.\n#\n# If you set this to true, Rails will rescue all errors and render error\n# pages, more or less in the same way your application would behave in the\n# default production environment. It's not recommended to do this for all\n# of your scenarios, as this makes it hard to discover errors in your application.\nActionController::Base.allow_rescue = false\n\n# If you set this to true, each scenario will run in a database transaction.\n# You can still turn off transactions on a per-scenario basis, simply tagging\n# a feature or scenario with the @no-txn tag. If you are using Capybara,\n# tagging with @culerity or @javascript will also turn transactions off.\n#\n# If you set this to false, transactions will be off for all scenarios,\n# regardless of whether you use @no-txn or not.\n#\n# Beware that turning transactions off will leave data in your database\n# after each scenario, which can lead to hard-to-debug failures in\n# subsequent scenarios. If you do this, we recommend you create a Before\n# block that will explicitly put your database in a known state.\n# Cucumber::Rails::World.use_transactional_fixtures = true\n# How to clean your database when transactions are turned off. See\n# http://github.com/bmabey/database_cleaner for more info.\n\nBefore do\n  Mongoid.master.collections.each(&:drop)\nend\n\n# if defined?(ActiveRecord::Base)\n#   begin\n#     require 'database_cleaner'\n#     DatabaseCleaner.strategy = :truncation\n#   rescue LoadError => ignore_if_database_cleaner_not_present\n#   end\n# end\n" "env(rails)" nil nil nil nil nil nil)
                       ("env" "require 'rubygems'\nrequire 'spork'\n# uncomment the following line to use spork with the debugger\n# require 'spork/ext/ruby-debug'\n\nSpork.prefork do\n  # Loading more in this block will cause your tests to run faster. However,\n  # if you change any configuration or code from libraries loaded here, you'll\n  # need to restart spork for it take effect.\n\n  require 'rails/application'\n  # This line required to proper routes reloading in Rails 3.1+\n  Spork.trap_method(Rails::Application::RoutesReloader, :reload!)\n  # Preloading your application\n  require File.dirname(__FILE__) + '/../../config/environment.rb'\n\n  require 'cucumber/rails'\n  Dir[Rails.root.join('spec/support/**/*.rb')].each { |f| require f }\n  # include Path\n\n  # Capybara defaults to CSS3 selectors rather than XPath.\n  # If you'd prefer to use XPath, just uncomment this line and adjust any\n  # selectors in your step definitions to use the XPath syntax.\n  # Capybara.default_selector = :xpath\n\n  # By default, any exception happening in your Rails application will bubble up\n  # to Cucumber so that your scenario will fail. This is a different from how\n  # your application behaves in the production environment, where an error page will\n  # be rendered instead.\n  #\n  # Sometimes we want to override this default behaviour and allow Rails to rescue\n  # exceptions and display an error page (just like when the app is running in production).\n  # Typical scenarios where you want to do this is when you test your error pages.\n  # There are two ways to allow Rails to rescue exceptions:\n  #\n  # 1) Tag your scenario (or feature) with @allow-rescue\n  #\n  # 2) Set the value below to true. Beware that doing this globally is not\n  # recommended as it will mask a lot of errors for you!\n  #\n  ActionController::Base.allow_rescue = false\n\n  # Remove/comment out the lines below if your app doesn't have a database.\n  # For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.\n  begin\n    DatabaseCleaner[:mongoid].strategy = :truncation\n  rescue NameError\n    raise 'You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it.'\n  end\n\n  # You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.\n  # See the DatabaseCleaner documentation for details. Example:\n  #\n  #   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do\n  #     # { :except => [:widgets] } may not do what you expect here\n  #     # as Cucumber::Rails::Database.javascript_strategy overrides\n  #     # this setting.\n  #     DatabaseCleaner.strategy = :truncation\n  #   end\n  #\n  #   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do\n  #     DatabaseCleaner[:mongoid].strategy = :truncation\n  #   end\n  #\n\n  Cucumber::Rails::Database.javascript_strategy = :truncation\n\n  include FactoryGirl::Syntax::Methods\n\n  Capybara.register_driver :chrome do |app|\n    Capybara::Selenium::Driver.new(app, browser: :chrome)\n  end\n  Capybara.javascript_driver = :chrome\n\n  # Possible values are :truncation and :transaction\n  # The :transaction strategy is faster, but might give you threading problems.\n  # See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature\nend\n\nSpork.each_run do\n  # This code will be run each time you run your specs.\n  FactoryGirl.reload\nend" "env(spork)" nil nil nil nil nil nil)
                       ("er" "expect($1).to receive(:$2)${3:.with($4)} {$5}" "expect receive" nil nil nil nil nil nil)
                       ("ex" "expect($1).to ${2:eq} $3" "expect" nil nil nil nil nil nil)
                       ("factory" "FactoryGirl.define do\n\n  factory $1 do\n    $0\n  end\n\nend\n" "factory" nil nil nil nil nil nil)
                       ("faker" "Faker::Lorem.paragraphs(rand(${1:5}) + ${2:2}).join(\"\\n\\n\")" "faker(paragraphs)" nil nil nil nil nil nil)
                       ("faker" "Faker::Lorem.sentence(${1:count})" "faker(sentence)" nil nil nil nil nil nil)
                       ("ffi" "${1:cpp}.function %{\n${2:int} ${3:init} (${4:params}) {\n$0\n}\n}\n" "ffi" nil nil nil nil nil nil)
                       ("fi" "field :$1, type: ${2:String}${3:, default: ${4:''}}" "field" nil nil nil nil nil nil)
                       ("gem" "gem 'zurb-foundation', '~> 4.0.0'" "foundation" nil nil nil nil nil nil)
                       ("test (rails min)" "group :development, :test do\n  gem 'thin'\n  gem 'quiet_assets'\n  gem 'ffaker'\nend\n\ngroup :test do\n  gem 'factory_girl_rails'\n  gem 'cucumber'\n  gem 'cucumber-rails', require: false\n  gem 'rspec-rails'\n  gem 'database_cleaner'\n  gem 'launchy'\n  gem 'selenium-webdriver'\nend\n" "gem" nil nil nil nil nil nil)
                       ("gem" "gem 'active_model_serializers'" "gem 'active_model_serializers'" nil nil nil nil nil nil)
                       ("gem" "source \"https://rubygems.org\"\n\ngem \"rake\"\n\ngroup :development do\n  gem \"cucumber\"\n  gem \"rspec\"\nend" "gem source" nil nil nil nil nil nil)
                       ("gem" "group :development do\n      $0\nend\n" "group :development" nil nil nil nil nil nil)
                       ("gem" "group :development, :test do\n      $0\nend" "group :development, :test" nil nil nil nil nil nil)
                       ("has_many" "has_many :$1, class_name: \"$2\", inverse_of: :$3" "has_many" nil nil nil nil nil nil)
                       ("paperclip" "  has_mongoid_attached_file :${1:attachment}, :styles => { thumb: [\"150x150>\", :jpg], medium: [\"500x500>\", :jpg] }\n  validates_attachment_content_type :$1, :content_type => [\"image/jpg\", \"image/jpeg\", \"image/png\", \"image/gif\"]" "has_mongoid_attached_file" nil nil nil nil nil nil)
                       ("icon" "def icon_tag(name)\n  content_tag(:span, \"\", class: \"glyphicon glyphicon-#{name}\")\nend" "icon_tag (bootstrap3)" nil nil nil nil nil nil)
                       ("helpers" "def icon_tag(name, size=\"fw\")\n  content_tag(:i, \"\", class: \"fa fa-#{name} fa-#{size}\")\nend" "icon_tag(font-awesome)" nil nil nil nil nil nil)
                       ("if" "if $1\n  $0\nend\n" "if" nil nil nil nil nil nil)
                       ("init" "\nattr_reader ${1:$(mapconcat 'identity (mapcar (lambda (e) (concat \":\" (chomp e) \" \")) (split-string yas-text \",\")) \",\")}\n\ndef initialize ${1:name, value}\n${1:$(mapconcat 'identity (mapcar (lambda (e) (concat \"@\" (chomp e) \" = \" (chomp e))) (split-string yas-text \",\")) \"\\n\")}\nend\n" "initialize with params" nil nil nil nil nil nil)
                       ("it" "it '$1' do\n         $0\nend" "it" nil nil nil nil nil nil)
                       ("ia" "it { $0 }" "it {}" nil nil nil nil nil nil)
                       ("gem" "group :test, :development do\n  gem 'jasminerice'\n  gem 'guard-jasmine'\nend" "jasmine" nil nil nil nil nil nil)
                       ("let" "let(:$1) { $2 }" "let" nil nil nil nil nil nil)
                       ("helpers" "def li_link_to label, path, options={}\n  active = (request.fullpath == path) ? \"active\" : \"\"\n  content_tag :li, link_to(label, path, options), class: active\nend" "li_link_to" nil nil nil nil nil nil)
                       ("markdown" "gem 'pygments.rb'\ngem 'redcarpet'\n\n## Markdown\n\nclass HTMLwithPygments < Redcarpet::Render::HTML\n  def block_code(code, language)\n    sha = Digest::SHA1.hexdigest(code)\n    Rails.cache.fetch [\"code\", language, sha].join('-') do\n      Pygments.highlight(code, lexer: language)\n    end\n  end\nend\n\ndef markdown(text)\n  renderer = HTMLwithPygments.new(hard_wrap: true, filter_html: true)\n  options = {\n    autolink: true,\n    no_intra_emphasis: true,\n    fenced_code_blocks: true,\n    lax_html_blocks: true,\n    strikethrough: true,\n    superscript: true,\n    tables: true\n  }\n  Redcarpet::Markdown.new(renderer, options).render(text).html_safe\nend" "markdown (Redcarpet, Pygments)" nil nil nil nil nil nil)
                       ("rdoc" "##\n# Creates a new shape described by a +polyline+.\n#\n# If the +polyline+ does not end at the same point it started at the\n# first pointed is copied and placed at the end of the line.\n#\n# An ArgumentError is raised if the line crosses itself, but shapes may\n# be concave." "method (RDoc)" nil nil nil nil nil nil)
                       ("migration"
                        (progndef up change_column
                                  (:games_quests
                                   (\, :created_at)
                                   (\, :datetime)
                                   (\, :null)
                                   => true)
                                  change_column
                                  (:games_quests
                                   (\, :updated_at)
                                   (\, :datetime)
                                   (\, :null)
                                   => true)
                                  end def down change_column
                                  (:games_quests
                                   (\, :created_at)
                                   (\, :datetime)
                                   (\, :null)
                                   => false)
                                  change_column
                                  (:games_quests
                                   (\, :updated_at)
                                   (\, :datetime)
                                   (\, :null)
                                   => false)
                                  end)
                        "migration(timestamp null)" nil nil
                        ((some-var some-value))
                        nil "direct-keybinding" nil)
                       ("omniauth" "Rails.application.config.middleware.use OmniAuth::Builder do\n  provider :twitter, ENV['TWITTER_KEY'], ENV['TWITTER_SECRET']\nend" "omniauth" nil nil nil nil "direct-keybinding" nil)
                       ("pp" "puts \"==================================================\"\np $0" "puts" nil nil nil nil nil nil)
                       ("rails_helper" "# This file is copied to spec/ when you run 'rails generate rspec:install'\nENV[\"RAILS_ENV\"] ||= 'test'\nrequire 'spec_helper'\nrequire File.expand_path(\"../../config/environment\", __FILE__)\nrequire 'rspec/rails'\n\n# Requires supporting ruby files with custom matchers and macros, etc, in\n# spec/support/ and its subdirectories. Files matching `spec/**/*_spec.rb` are\n# run as spec files by default. This means that files in spec/support that end\n# in _spec.rb will both be required and run as specs, causing the specs to be\n# run twice. It is recommended that you do not name files matching this glob to\n# end with _spec.rb. You can configure this pattern with with the --pattern\n# option on the command line or in ~/.rspec, .rspec or `.rspec-local`.\nDir[Rails.root.join(\"spec/support/**/*.rb\")].each { |f| require f }\n\nRSpec.configure do |config|\n  # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures\n  config.fixture_path = \"#{::Rails.root}/spec/fixtures\"\n\n  # If you're not using ActiveRecord, or you'd prefer not to run each of your\n  # examples within a transaction, remove the following line or assign false\n  # instead of true.\n  config.use_transactional_fixtures = true\n\n  # RSpec Rails can automatically mix in different behaviours to your tests\n  # based on their file location, for example enabling you to call `get` and\n  # `post` in specs under `spec/controllers`.\n  #\n  # You can disable this behaviour by removing the line below, and instead\n  # explicitly tag your specs with their type, e.g.:\n  #\n  #     RSpec.describe UsersController, :type => :controller do\n  #       # ...\n  #     end\n  #\n  # The different available types are documented in the features, such as in\n  # https://relishapp.com/rspec/rspec-rails/docs\n  config.infer_spec_type_from_file_location!\n\n  config.before(:suite) do\n    DatabaseCleaner.orm = :mongoid\n    DatabaseCleaner.strategy = :truncation\n    DatabaseCleaner.clean_with :truncation\n  end\n\n  config.before(:each) do\n    DatabaseCleaner.start\n  end\n\n  config.after(:each) do\n    DatabaseCleaner.clean\n  end\n\n  # config.include FactoryGirl::Syntax::Methods\n  # config.include Devise::TestHelpers, type: :controller\n  # config.include Mongoid::Matchers, type: :model\nend\n" "rails_helper.rb" nil nil nil nil nil nil)
                       ("rspec" "`(rspec-first-desc)`" "rpsec" nil nil nil nil nil nil)
                       ("get_index" "describe 'GET index' do\n  it 'index를 렌더링 해야 한다' do\n    get :index\n    response.should render_template('index')\n  end\n  it '모든 ${1:$(camelize text)}들이 @${1:$(pluralize-string text)}에 대입되어야 한다' do\n    $1 = create(:${1:article})\n    get :index\n    assigns(:${1:$(pluralize-string text)}).should eq [$1]\n  end\nend\n" "rspec get :index" nil nil nil nil nil nil)
                       ("get_new" "describe 'GET new' do\n  before :each do\n    get :new\n  end\n  it '새로운 ${1:$(camelize text)}가 @${1:article}에 대입되어야 한다' do\n    assigns(:$1).should be_a_new(${1:$(camelize text)})\n  end\n  it 'new 페이지를 렌더링 해야 한다' do\n    response.should render_template('new')\n  end\nend\n" "rspec get :new" nil nil nil nil nil nil)
                       ("get_show" "describe 'GET show' do\n  it 'show 페이지를 렌더링 해야 한다' do\n    ${1:article} = create(:$1)\n    get :show, id: $1.id\n    response.should render_template('show')\n  end\n  it '요청된 ${1:$(camelize text)}가 @$1에 대입되어야 한다' do\n    $1 = create(:$1)\n    get :show, id: $1.id\n    assigns(:$1).should eq $1\n  end\nend" "rspec get :show" nil nil nil nil nil nil)
                       ("post_create" "describe 'POST create' do\n  context '유요한 파라미터' do\n    before :each do\n      post :create, ${1:article}: attributes_for(:$1)\n    end\n    it '생성된 ${1:$(camelize text)} 페이지로 리다이렉트 되어야 한다' do\n      response.should redirect_to ${1:$(camelize text)}.last\n    end\n    it '저장된 ${1:$(camelize text)}가 @$1에 대입되어야 한다' do\n      assigns(:$1).should be_persisted\n    end\n  end\n  context '유효하지 않은 파라미터' do\n    before :each do\n      ${1:$(camelize text)}.any_instance.should_receive(:save) { false }\n      post :create, {}\n    end\n    it '저장되지 않은 ${1:$(camelize text)}가 @build에 대입되어야 한다' do\n      assigns(:$1).should be_a_new(${1:$(camelize text)})\n    end\n    it 'new 페이지를 렌더링 해야 한다' do\n      response.should render_template('new')\n    end\n  end\nend\n" "post_create" nil nil nil nil nil nil)
                       ("select2" "module Select2Helper\n  # @example\n  #   select2 \"Item\", from: \"select_id\"\n  #   select2 /^Item/, from: \"select_id\"\n  #\n  # @note Works with Select2 version 3.4.1.\n  def select2(text, options)\n    find(\"#s2id_#{options[:from]}\").click\n    all(\".select2-result-label\").find do |result|\n      result.text =~ Regexp.new(text)\n    end.click\n  end\nend\n\nWorld(Select2Helper)\n" "select2 (cucuamber world)" nil nil nil nil nil nil)
                       ("ccc" "# ========================================================" "seperator" nil nil nil nil nil nil)
                       ("seq" "sequence(:${1:attr}) {|n| ${2:\"$1#{n}\"} }" "sequence for factory gril" nil nil nil nil nil nil)
                       ("shook" "module Hook\n\n  def prepare_sandbox\n    FileUtils.rm_rf(sandbox_path)\n    FileUtils.mkdir_p(sandbox_path)\n    Dir.chdir(sandbox_path)\n  end\n\n  def prepare_fixtures\n    FileUtils.mkdir_p(sandbox_path)\n    FileUtils.cp_r(Dir.glob(fixtures_path(\"**\")), sandbox_path)\n  end\n\nend\n\ninclude Hook\n" "shook" nil nil nil nil nil nil)
                       ("source" "source \"http://rubygems.org\"" "source  'gemserver'" nil nil nil nil nil nil)
                       ("spath" "module Path\n\n  def rails_root_path(sub = '')\n    File.join(File.expand_path('../../..', __FILE__), sub)\n  end\n\n  def fixtures_path(sub = '')\n    File.join(rails_root_path, 'spec/fixtures', sub)\n  end\n\n  def sandbox_path(sub = '')\n    File.join(rails_root_path, 'tmp/sandbox', sub)\n  end\n\n  def tmp_path(sub = '')\n    File.join(rails_root_path, 'tmp', sub)\n  end\n\nend\n\ninclude Path" "spath" nil nil nil nil nil nil)
                       ("spec" "require 'spec_helper'\n\n`(rspec-first-desc)`" "spec" nil nil nil nil nil nil)
                       ("rake" "# rspec\nrequire 'rspec/core/rake_task'\nRSpec::Core::RakeTask.new :spec ${1:do |t|\n$0\nend}\n" "spec task" nil nil nil nil nil nil)
                       ("specr" "require 'spec_helper'\n\ndescribe ${1:\"`(concat (ruby-relative-source-path-dir) \"/\" (file-name-base (file-name-base (file-name-sans-versions (replace-regexp-in-string \"_spec$\" \"\" (file-name-base))))))`\"} do\n         $0\nend" "spec(rails)" nil nil nil nil nil nil)
                       ("include_factory" "config.include FactoryGirl::Syntax::Methods" "spec_fatory" nil nil nil nil nil nil)
                       ("spec_helper" "$LOAD_PATH.unshift(File.dirname(__FILE__))\n$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))\n\nrequire '$1'\n\nDir['./spec/support/**/*.rb'].each { |f| require f }\n\nRSpec.configure do |config|\n  config.backtrace_exclusion_patterns = [/.rvm/]\nend" "spec_helper for gem" nil nil nil nil nil nil)
                       ("spec_helper" "# This file is copied to spec/ when you run 'rails generate rspec:install'\nENV[\"RAILS_ENV\"] ||= 'test'\nrequire File.expand_path(\"../../config/environment\", __FILE__)\nrequire 'rspec/rails'\nrequire 'rspec/autorun'\n\n# Requires supporting ruby files with custom matchers and macros, etc,\n# in spec/support/ and its subdirectories.\nDir[Rails.root.join(\"spec/support/**/*.rb\")].each { |f| require f }\n\nRSpec.configure do |config|\n  config.backtrace_exclusion_patterns = [/.rvm/]\n\n  config.before(:suite) do\n    DatabaseCleaner.orm = :mongoid\n    DatabaseCleaner.strategy = :truncation\n    DatabaseCleaner.clean_with :truncation\n  end\n\n  config.before(:each) do\n    DatabaseCleaner.start\n  end\n\n  config.after(:each) do\n    DatabaseCleaner.clean\n  end\n\n  config.include FactoryGirl::Syntax::Methods\n  # config.include Devise::TestHelpers, type: :controller\n  # config.include Mongoid::Matchers, type: :model\n\n  # ## Mock Framework\n  #\n  # If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:\n  #\n  # config.mock_with :mocha\n  # config.mock_with :flexmock\n  # config.mock_with :rr\n\n  # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures\n  # config.fixture_path = \"#{::Rails.root}/spec/fixtures\"\n\n  # If you're not using ActiveRecord, or you'd prefer not to run each of your\n  # examples within a transaction, remove the following line or assign false\n  # instead of true.\n  # config.use_transactional_fixtures = true\n\n  # If true, the base class of anonymous controllers will be inferred\n  # automatically. This will be the default behavior in future versions of\n  # rspec-rails.\n  config.infer_base_class_for_anonymous_controllers = false\n\n  # Run specs in random order to surface order dependencies. If you find an\n  # order dependency and want to debug it, you can fix the order by providing\n  # the seed, which is printed after each run.\n  #     --seed 1234\n  config.order = \"random\"\nend\n" "spec_helper for rails" nil nil nil nil nil nil)
                       ("spec_helper" "require 'rubygems'\nrequire 'spork'\n# uncomment the following line to use spork with the debugger\n# require 'spork/ext/ruby-debug'\n\nSpork.prefork do\n  # Loading more in this block will cause your tests to run faster. However,\n  # if you change any configuration or code from libraries loaded here, you'll\n  # need to restart spork for it take effect.\n\n  # This file is copied to spec/ when you run 'rails generate rspec:install'\n  ENV['RAILS_ENV'] ||= 'test'\n\n  # Preloading Rails\n  require 'rails/application'\n  # This line required to proper routes reloading in Rails 3.1+\n  Spork.trap_method(Rails::Application::RoutesReloader, :reload!)\n  # Preloading your application\n  require File.dirname(__FILE__) + '/../config/environment.rb'\n\n  require 'rspec/rails'\n  require 'rspec/autorun'\n\n  Spork.trap_method(Rails::Application::RoutesReloader, :reload!)\n\n  # Requires supporting ruby files with custom matchers and macros, etc,\n  # in spec/support/ and its subdirectories.\n  Dir[Rails.root.join('spec/support/**/*.rb')].each { |f| require f }\n\n  RSpec.configure do |config|\n    # config.include Path\n    config.backtrace_exclusion_patterns = [/.rvm/]\n\n    config.before(:suite) do\n      DatabaseCleaner.orm = :mongoid\n      DatabaseCleaner.strategy = :truncation\n      DatabaseCleaner.clean_with :truncation\n    end\n\n    config.before(:each) do\n      DatabaseCleaner.start\n      each_before\n    end\n\n    config.after(:each) do\n      DatabaseCleaner.clean\n    end\n\n    # config.include Devise::TestHelpers, :type => :controller\n\n    config.include FactoryGirl::Syntax::Methods\n\n    # ## Mock Framework\n    #\n    # If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:\n    #\n    # config.mock_with :mocha\n    # config.mock_with :flexmock\n    # config.mock_with :rr\n\n    # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures\n    # config.fixture_path = '#{::Rails.root}/spec/fixtures'\n\n    # If you're not using ActiveRecord, or you'd prefer not to run each of your\n    # examples within a transaction, remove the following line or assign false\n    # instead of true.\n    # config.use_transactional_fixtures = true\n\n    # If true, the base class of anonymous controllers will be inferred\n    # automatically. This will be the default behavior in future versions of\n    # rspec-rails.\n    config.infer_base_class_for_anonymous_controllers = false\n\n    config.treat_symbols_as_metadata_keys_with_true_values = true\n    config.filter_run focus: true\n    config.run_all_when_everything_filtered = true\n\n    # Run specs in random order to surface order dependencies. If you find an\n    # order dependency and want to debug it, you can fix the order by providing\n    # the seed, which is printed after each run.\n    #     --seed 1234\n    config.order = 'random'\n  end\n\nend\n\nSpork.each_run do\n  # This code will be run each time you run your specs.\n  FactoryGirl.reload\n  I18n.backend.reload!\nend" "spec_helper(spork)" nil nil nil nil nil nil)
                       ("stub" "stub_template \"${1:builders}/_${2:sample}\" => \"<div id='${3:$2}'></div>\"\nrender\nassert_select \"#$3\"" "stub_template" nil nil nil nil nil nil)
                       ("tempfile" "${1:attachment}.queued_for_write[:original]\n" "tempfile" nil nil nil nil nil nil)
                       ("gem" "group :development, :test do\n  gem 'thin'\n  gem 'quiet_assets'\n  gem 'guard-rspec'\n  gem 'guard-cucumber'\n  gem 'spork-rails'\n  gem 'guard-spork'\n  gem 'ruby_parser'\n  gem 'jasminerice'\nend\n\ngroup :test do\n  gem 'factory_girl_rails'\n  gem 'cucumber'\n  gem 'cucumber-rails', require: false\n  gem 'rspec-rails'\n  gem 'database_cleaner'\n  gem 'launchy'\n  gem 'selenium-webdriver'\n  gem 'json_spec'\nend\n" "gem test(rails)" nil nil nil nil nil nil)
                       ("test_framework" "config.generators do |g|\n                  g.test_framework :rspec\nend\n" "test_framework" nil nil nil nil nil nil)
                       ("config" "config.generators do |g|\n                  g.test_framework :rspec\nend\nconfig.sass_options = {:cache_location => \"#{Rails.root.join('sass-cache')}\"}" "test_framework :rspec" nil nil nil nil nil nil)
                       ("gem" "gem \"thin\"\ngem \"quiet_assets\"" "thin" nil nil nil nil nil nil)
                       ("this" "@${1:name} = $1" "this" nil nil nil nil nil nil)
                       ("timecop" "Before(\"@timecop\") do\n  Timecop.freeze\nend\nAfter(\"@timecop\") do\n  Timecop.return\nend" "timecop (cucumber)" nil nil nil nil nil nil)
                       ("gem" "gem \"twitter-bootstrap-rails\"\ngem \"less-rails\"\ngem \"therubyracer\", :platforms => :ruby" "twitter" nil nil nil nil nil nil)
                       ("url_options" "def url_options\n  {$1: $2}.merge(super)\nend" "url_options" nil nil nil nil nil nil)
                       ("user" "user = User.create(email: \"rushcut@gmail.com\", password: \"pass1234\", password_confirmation: \"pass1234\")" "user" nil nil nil nil nil nil)
                       ("vagrant" "config.ssh.forward_agent = true\n# config.ssh.private_key_path = \"~/.ssh/id_rsa\"\n\nconfig.vm.forward_port 80, 8080\nconfig.vm.forward_port 3000, 3030\n\nconfig.vm.customize [\"modifyvm\", :id, \"--natdnsproxy1\", \"off\"]\nconfig.vm.customize [\"modifyvm\", :id, \"--natdnshostresolver1\", \"off\"]" "vagrant" nil nil nil nil nil nil)
                       ("with" "within(\"${1:selector}\") do\n                        $0\nend" "within (cucumber)" nil nil nil nil nil nil)))


;;; Snippet definitions:
;;;
(yas-define-snippets 'ruby-mode
                     '(("support" "Dir[File.expand_path('$1../support/**/*.rb', __FILE__)].each { |f| require f }" "inculde spec/support" nil nil nil nil nil nil)))


;;; Do not edit! File generated at Mon Aug 18 20:11:30 2014
